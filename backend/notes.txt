- From backend/ dir

# Compile the typescript (if dist is empty)
npx tsc

npm install

npm run dev           # server.ts
npm run dev:demo      # demoServer.ts
npm run build         # compiles all to /dist
npm start             # runs dist/server.js

# Demo Server
node dist/demoServer.js

# Pay Server
node dist/server.js or npm start

# CCIP-Terminal Server
uv run python treasury/main.py

# Avalanche Facilitator Server
uv run python facilitator/facilitator.py 

# Tests

uv run python tests/test2.py

uv run python tests/test3.py

# Curl 

## Locally 
curl -X GET http://localhost:5089/treasury/balances

curl -X GET http://localhost:3000/health

curl -X GET http://localhost:5089/treasury/vizualizations

## Remote/cloud

### Payer Server, Treasury Server, Facilitator Server

curl -X GET http://provider.boogle.cloud:32279/treasury/health

curl -X GET http://provider.boogle.cloud:31157/health

curl -X GET http://provider.boogle.cloud:32179/facilitator/health

### 402 Servers

curl -X GET http://provider.akash-palmito.org:30218/health

# Compile pyproject.lock

uv sync

rm pyproject.lock 

uv pip compile --output-file pyproject.lock pyproject.toml

# Remove pywin32 from pyproject.lock

# Docker (from root)

docker build --no-cache -t brandynham/httpayer-app .

for /f %i in ('powershell -Command "Get-Date -Format yyyyMMddHHmmss"') do set TAG=v0.1.2-%i
docker tag brandynham/httpayer-app brandynham/httpayer-app:%TAG%
docker push brandynham/httpayer-app:%TAG%

Run the container
docker run -p 3000:3000 -p 5089:5089 -p 4021:4021 -p 5035:5035 brandynham/httpayer-app

docker run -it brandynham/httpayer-app /bin/sh
